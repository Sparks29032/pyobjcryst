Import("env")

# Let's not mess up the global environment
wrapperenv = env.Clone()

# Make sure we use the proper python build options
wrapperenv.ParseConfig("python-config --includes")
wrapperenv.ParseConfig("python-config --ldflags")

# Look here for our shared library
wrapperenv.Append(LIBPATH = "./")

# Get rid of the lib prefix
wrapperenv["SHLIBPREFIX"]=""

# Make correct suffix
import os
if os.name == 'nt':
    wrapperenv['SHLIBSUFFIX']='.pyd'
else: 
    wrapperenv['SHLIBSUFFIX']='.so'

# Append objcryst libraries and required boost library
wrapperenv.Append(LIBS = ["objcryst", "boost_python"])

# Identify the headers for ObjCryst
wrapperenv.Append(CPPPATH = "../src/ObjCryst")

# Get the modules
modfiles = Glob("*_ext.cpp")

for fileobj in modfiles:
    filename = str(fileobj)
    libname = "_" + filename[:-8]
    wrapper = wrapperenv.LoadableModule("../pyobjcryst/%s"%libname, fileobj)
    Alias("build", wrapper)

# Make sure _registerconverters.so is built
wrapper = wrapperenv.LoadableModule( "../pyobjcryst/_registerconverters",
        "registerconverters.cpp")
Alias("build", wrapper)

