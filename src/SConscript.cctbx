Import('env')

# Start by extracting the source library
archive = "cctbx.tar.bz2"
import os
if not os.path.exists("cctbx"):
    import tarfile
    tf = tarfile.open(archive, "r:bz2")
    tf.extractall()
    tf.close()

    from copytree import rmtree, copytree, ignore_patterns
    print "Copying header files"
    if os.path.exists("../include/cctbx"):
        rmtree("../include/cctbx")
    copytree("cctbx", "../include/cctbx",
            ignore=ignore_patterns('*.cpp'))

# Define the what we need to install cctbx
cctbxenv = env.Clone()

# Add some flags
compiler_type = env["compiler_type"]
flags = []
if compiler_type in ("unix", "cygwin", "mingw32"):
    flags = ["-O3", "-pedantic"]
elif compiler_type == "msvc":
    flags = ["/O2"]
cctbxenv.AppendUnique(CXXFLAGS = flags)

# Source path
cctbxenv.Append(CPPPATH = ["./cctbx/cctbx/include", "./cctbx/scitbx/include"])

# Idenfity the required source files
srcfiles  = Glob("./cctbx/cctbx/eltbx/*.cpp")
srcfiles += Glob("./cctbx/cctbx/eltbx/xray_scattering/*.cpp")
srcfiles += Glob("./cctbx/cctbx/sgtbx/*.cpp")
srcfiles += Glob("./cctbx/cctbx/sgtbx/reference_settings/*.cpp")
srcfiles += Glob("./cctbx/cctbx/global/*.cpp")
srcfiles += Glob("./cctbx/cctbx/miller/*.cpp")
srcfiles += Glob("./cctbx/cctbx/uctbx/*.cpp")

# Make the library object
objects = cctbxenv.SharedObject(srcfiles)

# Let the build system know that we can clean the source directory when clean
# is called.
Clean(objects, "cctbx")
Clean(objects, "../include/cctbx")
Clean(objects, archive)

# Put this back into the global environment
env["cctbxobjs"] = objects

