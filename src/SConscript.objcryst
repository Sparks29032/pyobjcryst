Import('env')

# Start by extracting the source library
archive = "ObjCryst.tar.gz"
import os
if not os.path.exists("ObjCryst"):
    import tarfile
    tf = tarfile.open(archive, "r:gz")
    tf.extractall()
    tf.close()

# Extract the headers
if not os.path.exists("../include"):
    print "Copying header files"
    from shutil import copytree, ignore_patterns
    copytree("ObjCryst", "../include/ObjCryst",
            ignore=ignore_patterns('*.cpp'))


# Define the what we need to install objcryst
objcrystenv = env.Clone()

# Add some necessary flags and libraries
objcrystenv.Append(CPPFLAGS = " -O3 -w -ffast-math -fstrict-aliasing") 
objcrystenv.Append(CPPFLAGS = " -pipe -fomit-frame-pointer -funroll-loops")
objcrystenv.Append(CPPFLAGS = " -DREAL=double")

# Source directories
objcrystenv.Append(CPPPATH = [".", "./ObjCryst"])
objcrystenv.Append(CPPPATH = ["./cctbx/cctbx/include", "./cctbx/scitbx/include"])

# Idenfity the required source files
srcfiles  = Glob("./ObjCryst/ObjCryst/*.cpp")
srcfiles += Glob("./ObjCryst/RefinableObj/*.cpp")
srcfiles += Glob("./ObjCryst/CrystVector/*.cpp")
srcfiles += Glob("./ObjCryst/Quirks/*.cpp")

# Make shared objects
objects = objcrystenv.SharedObject(srcfiles)

# Let the build system know that we can clean the source directory when clean
# is called.
Clean(objects, "ObjCryst")
Clean(objects, "../include")
Clean(objects, archive)

# Put this back into the global environment
env["objcrystobjs"] = objects
