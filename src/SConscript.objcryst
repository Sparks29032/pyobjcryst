Import('env')

# Start by extracting the source library
archive = "ObjCryst.tar.gz"
import os
if not os.path.exists("ObjCryst"):
    import tarfile
    tf = tarfile.open(archive, "r:gz")
    tf.extractall()
    tf.close()

    from copytree import rmtree, copytree, ignore_patterns
    print "Copying header files"
    if os.path.exists("../include/ObjCryst"):
        rmtree("../include/ObjCryst")
    copytree("ObjCryst", "../include/ObjCryst",
            ignore=ignore_patterns('*.cpp'))

# Define the what we need to install objcryst
objcrystenv = env.Clone()

# Add some flags
compiler_type = env["compiler_type"]
flags = []
if compiler_type in ("unix", "cygwin", "mingw32"):
    flags = ["-O3","-w", "-ffast-math", "-pipe", "-funroll-loops"]
elif compiler_type == "msvc":
    flags = ["/Ox", "/Oy"]
objcrystenv.AppendUnique(CXXFLAGS = flags)

objcrystenv.AppendUnique(CPPDEFINES='REAL=double')

# Source directories
objcrystenv.Append(CPPPATH = [".", "./ObjCryst"])
objcrystenv.Append(CPPPATH = ["./cctbx/cctbx/include", "./cctbx/scitbx/include"])

# Idenfity the required source files
srcfiles  = Glob("./ObjCryst/ObjCryst/*.cpp")
srcfiles += Glob("./ObjCryst/RefinableObj/*.cpp")
srcfiles += Glob("./ObjCryst/CrystVector/*.cpp")
srcfiles += Glob("./ObjCryst/Quirks/*.cpp")

# Make shared objects
objects = objcrystenv.SharedObject(srcfiles)

# Let the build system know that we can clean the source directory when clean
# is called.
Clean(objects, "ObjCryst")
Clean(objects, "../include/ObjCryst")
Clean(objects, archive)

# Put this back into the global environment
env["objcrystobjs"] = objects
