Import('env', 'pyconfigvar', 'pyversion')

# Helper functions -----------------------------------------------------------

def CheckOptimizerFlag(context, flag):
    ccflags_save = context.env['CCFLAGS']
    context.Message('Checking if compiler allows {!r}... '.format(flag))
    context.env.Replace(CCFLAGS=[flag])
    result = context.TryCompile('int a;\n', '.cpp')
    context.Result(result)
    if not result:
        ccflags_save.remove(flag)
    context.env.Replace(CCFLAGS=ccflags_save)
    return result


boostlibtags = ['', '-mt']
def configure_boost_library(libname):
    '''Add a boost library to the configured environment allowing for any
    of the boostlibtags name extensions.

    libname  -- boost library name without any extension

    Note: CheckLib function automatically adds library to the environment.
    '''
    # adjust libname for boost_python
    if libname == 'boost_python' and pyversion[0] == '3':
        libname = 'boost_python3'
    # using global conf defined below
    for t in boostlibtags:
        libnamefull = libname + t
        if conf.CheckLib(libnamefull, language='C++'):
            boostlibtags[:] = [t]
            return
    # library not found here
    print('This program requires %r library.' % libname)
    Exit(1)

# Start configuration --------------------------------------------------------

# Anaconda Python is compiled with super fancy gcc optimizer flags.
# Remove any flags that are not supported by the current compiler.

custom_tests = {'CheckOptimizerFlag' : CheckOptimizerFlag}
conf = Configure(env, custom_tests=custom_tests)
optflags = [o for o in env['CCFLAGS']
            if o[:2] in ('-f', '-m')]
for o in optflags:
    conf.CheckOptimizerFlag(o)
conf.Finish()

# Create configuration environment that links with Python shared_library, so
# that the boost_python check does not fail due to unresolved Python symbols.
ecfg = env.Clone()
ecfg.Append(LIBS=[])
ecfg.MergeFlags(pyconfigvar('BLDLIBRARY'))
newlibsindex = len(ecfg['LIBS'])

conf = Configure(ecfg)
if not conf.CheckLib('ObjCryst', language='C++'):
    print("This program requires 'libObjCryst' library.")
    Exit(1)
configure_boost_library('boost_python')
conf.Finish()

# Use libraries that were found in the configuration.
env.AppendUnique(LIBS=ecfg['LIBS'][newlibsindex:])

# vim: ft=python
