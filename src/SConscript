Import('env')

# Download the source files if we must. If we must extract the source archives,
# then make sure the srcfile is not corrupt.
srcfile = "ObjCryst-r1162.tgz"
md5sum = "3597d75e194e35c355732a59bbf87893"

# FIXME - use SCons to do this!
import os.path
if not (os.path.exists("cctbx") or os.path.exists("cctbx.tar.bz2")) \
    or not (os.path.exists("newmat") or os.path.exists("newmat.tar.bz2"))\
    or not (os.path.exists("ObjCryst") or os.path.exists("ObjCryst.tar.gz")):

    # Download the file
    if not os.path.exists(srcfile):
        import sys
        import urllib
        msg = "Fetching source files. This might take a while... "
        def hook(blocknum, bs, size):
            output = "\r%s%i%%"%(msg, int(100.0*blocknum*bs/size))
            sys.stdout.write(output)
            sys.stdout.flush()

        try:
            urllib.urlretrieve("http://dev.danse.us/packages/%s"%srcfile,
                    srcfile, hook)
            print "\r%s Done!"%msg
        except (KeyboardInterrupt, IOError, urllib.ContentTooShortError), e:
            # Remove what has been downloaded already
            if os.path.exists(srcfile):
                import os
                os.remove(srcfile)
            raise e

    # Verify the download
    f = file(srcfile, 'r')
    import hashlib
    checksum = hashlib.md5(f.read()).hexdigest()
    f.close()
    if not md5sum == checksum:
        raise RuntimeError("The source file '%s' is corrupted"%srcfile)

    # Uncompress it
    import tarfile
    tf = tarfile.open(srcfile, "r:gz")
    tf.extractall()
    tf.close()

# This will build the intermediate objects required for the library
SConscript(["SConscript.cctbx", "SConscript.newmat", "SConscript.objcryst"])

# This retrieves the intermediate objects
newmatobjs = env["newmatobjs"]
cctbxobjs = env["cctbxobjs"]
objcrystobjs = env["objcrystobjs"]

# This builds the shared library
sl = env.SharedLibrary("objcryst", objcrystobjs + cctbxobjs + newmatobjs)
build = Alias("build", sl)

# Put this in the pyobjcryst directory
inst1 = env.Install("../boost", sl)
inst2 = env.Install("../lib", sl)
Alias("install", [build, inst1, inst2])
